from django.shortcuts import render, redirectfrom django.core import serializersfrom django.http import HttpResponse, JsonResponsefrom django.utils import timezonefrom django.db import IntegrityErrorimport mathimport csvimport jsonfrom ..views.common import *from ..models.restaurant import *from ..models.menu import *from ..forms.menu_forms import *def show_menus(request):    return render(request,  'food_app/menu/menu_default.html')def menu_dialog(request):    return render(request, 'food_app/menu/menu_dialog.html')def add_menu_category(request):   try:      data = json.loads(request.body.decode("utf-8")) if request.body.decode("utf-8") else {}      # First we need to Save Menu Category with the data restaurant_id      try:         instance = Menu_category.objects.get(restaurant_id=data['restaurant'])         form_menu_category = Menu_category_form(data, instance=instance)      except Menu_category.DoesNotExist:         form_menu_category = Menu_category_form(data)      if(form_menu_category.is_valid()):         form_menu_category_save = form_menu_category.save()         form_menu_category_save_pk = form_menu_category_save.pk      else:         raise ValueError(json.dumps(form_menu_category.errors))      # Next we need to save the data for menu category details      data['menu_category'] = form_menu_category_save_pk      try:         if data.get('menu_category_details_id', None) == None:            # However, we should not accept two same names of a menu category             instance = Menu_category_details.objects.get(menu_category__restaurant_id=data['restaurant'], name__icontains=data['name'], is_deleted=False)            raise ValueError('Category already exists!')         else:            if data.get('menu_category_details_id', None) != None:               instance = Menu_category_details.objects.get(menu_category__restaurant_id=data['restaurant'], id=data['menu_category_details_id'], is_deleted=False)               form_menu_category_details = Menu_category_details_form(data, instance=instance)      except Menu_category_details.DoesNotExist:         form_menu_category_details = Menu_category_details_form(data)      if(form_menu_category_details.is_valid()):         form_menu_category_details_save = form_menu_category_details.save()         form_menu_category_details_save_pk = form_menu_category_details_save.pk      else:         raise ValueError(json.dumps(form_menu_category_details.errors))      return HttpResponse('Success!', status=200)   except Exception as err:      print(err)      return HttpResponse(err, status=400)def delete_menu_category(request, menu_category_details_pk=None):   try:      # We need to get the id for menu category      menu_category_details = Menu_category_details.objects.get(id=menu_category_details_pk, is_deleted=False)      # We then update it      menu_category_details.is_deleted = True      # We then save it      menu_category_details.save()            return HttpResponse('Successfully deleted!', status=200)   except Exception as err:      print(err)      return HttpResponse(err, status=400)def read_all_menu_categories(request, restaurant_id=None):   try:      data = {'values' : []}      rows = []      try:         # We need to get all menu categories base on the restaurant id         menu_category_pk = Menu_category.objects.get(restaurant_id=restaurant_id, is_deleted=False).pk         responses = Menu_category_details.objects.filter(menu_category_id = menu_category_pk, is_deleted=False).values()                  for response in responses:            rows.append(response)         data['values'] = rows         return HttpResponse(json.dumps(data), status=200)      except Menu_category.DoesNotExist:         rows = False         return HttpResponse(rows, status=200)   except Exception as err:      print(err)      return HttpResponse(err, status=400)def read_menu_category(request, menu_category_details_pk=None):   try:      data = {'values' : []}      rows = []      # We need to get all menu categories base on the restaurant id      responses = Menu_category_details.objects.filter(id=menu_category_details_pk, is_deleted=False).values()      for response in responses:         if response['menu_category_id']:            restaurant_id = Menu_category.objects.get(id=response['menu_category_id'], is_deleted=False).restaurant_id            response['restaurant'] = Restaurant.objects.filter(pk=restaurant_id, is_deleted=False).values()[0]          rows.append(response)      data['values'] = rows      return HttpResponse(json.dumps(data), status=200)   except Exception as err:      print(err)      return HttpResponse(err, status=400)